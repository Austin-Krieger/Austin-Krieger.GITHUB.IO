<button class="collapsible">Variables (Included)</button>
<div class="content">
    <h2>Variables</h2>
    <p>The basic unit of storage in a Java program.</p>
    <h2>Declaring a Variable</h2>
    <p>Variables must be declared before they can be used.</p>
    <div class="code" id="variables1"><button class="copy" onclick="copyText('variables1')">Copy</button><p>
        Type identifier [ = value ][, identifier [ = value ] ...];<br>
        int value1 = 12, value2 = 24;
    </p>
    </div>
    <h3>Java Identifiers</h3>
    <p>All Java variables must be identified with unique names known as identifiers.</p>
    <p>Identifiers can be short names (like x and y) or more descriptive names "recommended" (age, sum, totalVolume).</p>
    <p>The general rules for constructing names for variables (unique identifiers) are:</p>
    <ul>
        <li>Names can contain letters, digits, underscores, and dollar signs</li>
        <li>Names should begin with a letter</li>
        <li>Names can also begin with $ and _</li>
        <li>Names are case sensitive ("myVar" and "myvar" are different variables)</li>
        <li>Names should start with a lowercase letter and it cannot contain whitespace</li>
        <li>Reserved words (like Java keywords, such as int or String) cannot be used as names</li>
    </ul>
    <div class="scrollableTable"><table>
        <tr>
            <th rowspan="2">Instance Variables</th>
            <td>"The data, or variables, defined within a class"</td>
        </tr>
        <tr>
            <td>Each instance/object of a class contains its own copy of these variables</td>
        </tr>
        <tr>
            <th rowspan="2">Local Variables</th>
            <td>A variable declared inside the body of the method/block. Only visible within that method/blcok.</td>
        </tr>
        <tr>
            <td>Braces indicate the scope of this variable (where it can be seen and used).</td>
        </tr>
        <tr>
            <th rowspan="2">Static Variables (Class Variables)</th>
            <td>Exist without creating an object and share the same value among all objects created from the same class.</td>
        </tr>
        <tr>
            <td>A variable that has been allocated "statically", meaning that its lifetime (or "extent") is the entire run of the program.</td>
        </tr>
    </table></div>
    <p style="font-weight: bold;">Dynamically Initializing Variables:</p>
    <ul>
        <li>Java allows variable to be initialized dynamically, using any expression valid at the time the variable is declared.</li>
        <li>double c = Math.sqrt(a * a + b * b);</li>
    </ul>
    <p style="font-weight: bold;">Scope and Lifetime of Variables:</p>
    <ul>
        <li>All variables have a scope, which defines their visibility and lifetime.</li>
        <li>Variables are created when their scope is entered and destroyed when their scope is left.</li>
        <li>A variable will not hold its value once it has gone out of scope.</li>
    </ul>
    <p style="font-weight: bold;">Conversion and Casting:</p>
    <ul>
        <li>Assign a value of one type to a variable of another type.</li>
        <li>If the two types are compatible then Java will perform the conversion automatically or "implicitly".</li>
        <li>Not all types are compatible, but it is still possible to perform the conversion explicitly using a cast.</li>
        <ul>
            <li style="font-weight: bold;">Implicit type conversion: "Automatic Type Conversion" Occurs when:</li>
            <ul>
                <li>Two types are compatible.</li>
                <li>The target type is larger than the source type.</li>
            </ul>
            <br>
            <ol>
                <li>If one of the operands is double, the other is promoted to double before the operation is carried out.</li>
                <li>Otherwise, if one of the operands is float, the other is promoted to float before the operation is carried out.</li>
                <li>Otherwise, if one of the operands is long, the other is promoted to long before the operation is carried out.</li>
                <li>Otherwise if either operand is int, the other operand is promoted to int.</li>
                <li>If neither operand is double, float, long or int, both operands are promoted to int.</li>
            </ol>
            <div class="code" id="variables2"><button class="copy" onclick="copyText('variables2')">Copy</button><p>byte b = 10; <br> long l = 1 + 8; <br> double d = b * 2.5 + l; <br><br> System.out.println("I = " + i); <br> System.out.println("J = " + j); <br> System.out.println("K =" + k); <br><br> <b>Output:</b> <br><br>I = 10 <br>J = 9 <br>K = 34.0</p></div>
        </ul>
        <ul>
            <li style="font-weight: bold;">Explicit type conversion: (target-type) value</li>
        </ul>
        <div class="code" id="variables3"><button class="copy" onclick="copyText('variables3')">Copy</button><p>int a; <br> byte b; <br> b = (byte) a;</p></div>
    </ul>
</div>